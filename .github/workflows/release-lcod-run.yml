name: Release lcod-run

on:
  push:
    tags:
      - "lcod-run-v*"
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: lcod-run-linux-x86_64
            archive: tar.gz
            rustflags: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: lcod-run-linux-arm64
            archive: tar.gz
            rustflags: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: lcod-run-macos-arm64
            archive: tar.gz
            mac_deployment_target: "13.0"
            rustflags: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: lcod-run-macos-x86_64
            archive: tar.gz
            mac_deployment_target: "13.0"
            rustflags: ""
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact: lcod-run-windows-x86_64
            archive: zip
            rustflags: ""
    env:
      RUSTFLAGS: ${{ matrix.rustflags }}
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout kernel
        uses: actions/checkout@v4

      - name: Checkout spec
        uses: actions/checkout@v4
        with:
          repository: lcod-team/lcod-spec
          path: lcod-spec

      - name: Checkout resolver
        uses: actions/checkout@v4
        with:
          repository: lcod-team/lcod-resolver
          path: lcod-resolver

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: lcod-spec/package-lock.json

      - name: Install spec dependencies
        working-directory: lcod-spec
        run: npm ci

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          targets: ${{ matrix.target }}

      - name: Install Linux cross toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu pkg-config
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> "$GITHUB_ENV"
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> "$GITHUB_ENV"
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> "$GITHUB_ENV"
          echo "RANLIB_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ranlib" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_aarch64_unknown_linux_gnu=pkg-config" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> "$GITHUB_ENV"
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> "$GITHUB_ENV"
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR=aarch64-linux-gnu-ar" >> "$GITHUB_ENV"
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RANLIB=aarch64-linux-gnu-ranlib" >> "$GITHUB_ENV"

      - name: Configure MinGW toolchain (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          set -euo pipefail
          candidates=(
            "C:/msys64/ucrt64/bin"
            "C:/msys64/mingw64/bin"
            "C:/msys64/clang64/bin"
          )
          toolchain_dir=""
          for candidate in "${candidates[@]}"; do
            if [ -d "$candidate" ] && compgen -G "$candidate/*gcc.exe" >/dev/null 2>&1; then
              toolchain_dir="$candidate"
              break
            fi
          done
          if [ -z "$toolchain_dir" ]; then
            echo "MinGW binaries not found in preinstalled locations; installing via Chocolatey."
            choco install --yes --no-progress mingw
            if [ -d "C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin" ]; then
              toolchain_dir="C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin"
            elif [ -d "C:/tools/mingw64/bin" ]; then
              toolchain_dir="C:/tools/mingw64/bin"
            else
              echo "::error::Unable to locate MinGW toolchain after installation." >&2
              exit 1
            fi
          fi
          gcc_path="$toolchain_dir/x86_64-w64-mingw32-gcc.exe"
          gxx_path="$toolchain_dir/x86_64-w64-mingw32-g++.exe"
          ar_path="$toolchain_dir/x86_64-w64-mingw32-ar.exe"
          ranlib_path="$toolchain_dir/x86_64-w64-mingw32-ranlib.exe"
          if [ ! -f "$gcc_path" ] && [ -f "$toolchain_dir/gcc.exe" ]; then
            gcc_path="$toolchain_dir/gcc.exe"
          fi
          if [ ! -f "$gxx_path" ] && [ -f "$toolchain_dir/g++.exe" ]; then
            gxx_path="$toolchain_dir/g++.exe"
          fi
          if [ ! -f "$ar_path" ] && [ -f "$toolchain_dir/ar.exe" ]; then
            ar_path="$toolchain_dir/ar.exe"
          fi
          if [ ! -f "$ranlib_path" ] && [ -f "$toolchain_dir/ranlib.exe" ]; then
            ranlib_path="$toolchain_dir/ranlib.exe"
          fi
          if [ ! -f "$gcc_path" ]; then
            echo "::error::gcc executable not found under $toolchain_dir" >&2
            exit 1
          fi
          echo "$toolchain_dir" >> "$GITHUB_PATH"
          echo "WINDOWS_MINGW_BIN=$toolchain_dir" >> "$GITHUB_ENV"
          echo "CC=$gcc_path" >> "$GITHUB_ENV"
          echo "CXX=$gxx_path" >> "$GITHUB_ENV"
          echo "AR=$ar_path" >> "$GITHUB_ENV"
          echo "RANLIB=$ranlib_path" >> "$GITHUB_ENV"
          echo "CC_x86_64_pc_windows_gnu=$gcc_path" >> "$GITHUB_ENV"
          echo "CXX_x86_64_pc_windows_gnu=$gxx_path" >> "$GITHUB_ENV"
          echo "AR_x86_64_pc_windows_gnu=$ar_path" >> "$GITHUB_ENV"
          echo "RANLIB_x86_64_pc_windows_gnu=$ranlib_path" >> "$GITHUB_ENV"
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=$gcc_path" >> "$GITHUB_ENV"
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_AR=$ar_path" >> "$GITHUB_ENV"
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_RANLIB=$ranlib_path" >> "$GITHUB_ENV"

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2

      - name: Configure macOS SDK
        if: matrix.os == 'macos-latest'
        run: echo "MACOSX_DEPLOYMENT_TARGET=${{ matrix.mac_deployment_target }}" >> "$GITHUB_ENV"

      - name: Export resolver snapshot
        working-directory: lcod-resolver
        run: node scripts/export-runtime.mjs

      - name: Build runtime bundle
        id: bundle
        shell: bash
        env:
          RESOLVER_REPO_PATH: ${{ github.workspace }}/lcod-resolver
        run: |
          set -euo pipefail
          cd lcod-spec
          node scripts/package-runtime.mjs --output dist/runtime --label "${GITHUB_SHA::7}"
          echo "archive=$PWD/dist/runtime/lcod-runtime-${GITHUB_SHA::7}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Build lcod-run
        shell: bash
        env:
          RESOLVER_REPO_PATH: ${{ github.workspace }}/lcod-resolver
          LCOD_EMBED_RUNTIME: ${{ steps.bundle.outputs.archive }}
        run: |
          set -euo pipefail
          cargo build --release --bin lcod_run --target ${{ matrix.target }}

      - name: Prepare artifact
        id: package
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          if [ "${{ matrix.archive }}" = "tar.gz" ]; then
            cp target/${{ matrix.target }}/release/lcod_run dist/lcod-run
            strip dist/lcod-run || true
            tar -czf ${{ matrix.artifact }}.tar.gz -C dist lcod-run
            echo "path=${{ matrix.artifact }}.tar.gz" >> "$GITHUB_OUTPUT"
          else
            cp target/${{ matrix.target }}/release/lcod_run.exe dist/lcod-run.exe
            mingw_bin="${WINDOWS_MINGW_BIN:-}"
            mingw_root=""
            if [ -n "$mingw_bin" ] && [ -d "$mingw_bin" ]; then
              mingw_root="$(cd "$mingw_bin/.." && pwd)"
            else
              mingw_gcc="$(command -v x86_64-w64-mingw32-gcc || command -v gcc || true)"
              if [ -n "$mingw_gcc" ]; then
                mingw_bin="$(dirname "$mingw_gcc")"
                mingw_root="$(cd "$mingw_bin/.." && pwd)"
              fi
            fi
            if [ -n "$mingw_root" ]; then
              for dll in libgcc_s_seh-1.dll libstdc++-6.dll libwinpthread-1.dll; do
                src=""
                if command -v x86_64-w64-mingw32-gcc >/dev/null 2>&1; then
                  candidate="$(x86_64-w64-mingw32-gcc -print-file-name="$dll" 2>/dev/null || true)"
                  if [ -n "$candidate" ] && [ "$candidate" != "$dll" ] && [ -f "$candidate" ]; then
                    src="$candidate"
                  fi
                fi
                if [ -z "$src" ] || [ ! -f "$src" ]; then
                  src="$(find "$mingw_root" -name "$dll" -print -quit 2>/dev/null || true)"
                fi
                if [ -n "$src" ] && [ -f "$src" ]; then
                  cp "$src" "dist/${dll}"
                  echo "Bundled $dll from $src"
                else
                  echo "::warning::Missing runtime DLL $dll under $mingw_root" >&2
                fi
              done
            else
              echo "::warning::Unable to resolve MinGW toolchain path; runtime DLLs not bundled" >&2
            fi
            powershell.exe -NoProfile -Command "Compress-Archive -Path 'dist\\*' -DestinationPath '${{ matrix.artifact }}.zip' -Force"
            echo "path=${{ matrix.artifact }}.zip" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ steps.package.outputs.path }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Generate checksums
        shell: bash
        run: |
          set -euo pipefail
          cd release-assets
          find . -mindepth 2 -maxdepth 2 -type f -print0 | while IFS= read -r -d '' file; do
            sha256sum "$file" >"$file.sha256"
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/**/*
      - name: Install Linux cross toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu pkg-config
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> "$GITHUB_ENV"
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> "$GITHUB_ENV"
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> "$GITHUB_ENV"
          echo "RANLIB_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ranlib" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_aarch64_unknown_linux_gnu=pkg-config" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> "$GITHUB_ENV"
