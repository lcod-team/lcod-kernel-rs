name: Release lcod-run

on:
  push:
    tags:
      - "lcod-run-v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: lcod-run-linux-x86_64
            archive: tar.gz
            rustflags: "-C target-cpu=native"
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: lcod-run-macos-x86_64
            archive: tar.gz
            mac_deployment_target: "13.0"
            rustflags: ""
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact: lcod-run-windows-x86_64
            archive: zip
            rustflags: ""
    env:
      RUSTFLAGS: ${{ matrix.rustflags }}
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout kernel
        uses: actions/checkout@v4

      - name: Checkout spec
        uses: actions/checkout@v4
        with:
          repository: lcod-team/lcod-spec
          path: lcod-spec

      - name: Checkout resolver
        uses: actions/checkout@v4
        with:
          repository: lcod-team/lcod-resolver
          path: lcod-resolver

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: lcod-spec/package-lock.json

      - name: Install spec dependencies
        working-directory: lcod-spec
        run: npm ci

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: ${{ matrix.target }}

      - name: Configure MinGW toolchain (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          echo "C:/msys64/mingw64/bin" >> "$GITHUB_PATH"
          echo "CC=x86_64-w64-mingw32-gcc" >> "$GITHUB_ENV"
          echo "CXX=x86_64-w64-mingw32-g++" >> "$GITHUB_ENV"
          echo "AR=ar" >> "$GITHUB_ENV"
          echo "RANLIB=ranlib" >> "$GITHUB_ENV"
          echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc" >> "$GITHUB_ENV"
          echo "CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++" >> "$GITHUB_ENV"
          echo "AR_x86_64_pc_windows_gnu=ar" >> "$GITHUB_ENV"
          echo "RANLIB_x86_64_pc_windows_gnu=ranlib" >> "$GITHUB_ENV"

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2

      - name: Configure macOS SDK
        if: matrix.os == 'macos-latest'
        run: echo "MACOSX_DEPLOYMENT_TARGET=${{ matrix.mac_deployment_target }}" >> "$GITHUB_ENV"

      - name: Export resolver snapshot
        working-directory: lcod-resolver
        run: node scripts/export-runtime.mjs

      - name: Build runtime bundle
        id: bundle
        shell: bash
        env:
          RESOLVER_REPO_PATH: ${{ github.workspace }}/lcod-resolver
        run: |
          set -euo pipefail
          cd lcod-spec
          node scripts/package-runtime.mjs --output dist/runtime --label "${GITHUB_SHA::7}"
          echo "archive=$PWD/dist/runtime/lcod-runtime-${GITHUB_SHA::7}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Build lcod-run
        shell: bash
        env:
          RESOLVER_REPO_PATH: ${{ github.workspace }}/lcod-resolver
          LCOD_EMBED_RUNTIME: ${{ steps.bundle.outputs.archive }}
        run: |
          set -euo pipefail
          cargo build --release --bin lcod_run --target ${{ matrix.target }}

      - name: Prepare artifact
        id: package
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          if [ "${{ matrix.archive }}" = "tar.gz" ]; then
            cp target/${{ matrix.target }}/release/lcod_run dist/lcod-run
            strip dist/lcod-run || true
            tar -czf ${{ matrix.artifact }}.tar.gz -C dist lcod-run
            echo "path=${{ matrix.artifact }}.tar.gz" >> "$GITHUB_OUTPUT"
          else
            cp target/${{ matrix.target }}/release/lcod_run.exe dist/lcod-run.exe
            powershell.exe -Command "Compress-Archive -Path dist/lcod-run.exe -DestinationPath ${{ matrix.artifact }}.zip"
            echo "path=${{ matrix.artifact }}.zip" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ steps.package.outputs.path }}
